openapi: 3.0.0
info:
  title: Movie Booking System API
  description: A comprehensive API for movie ticket booking system with JWT authentication
  version: 1.0.0
  contact:
    email: contact@moviebooking.local
  license:
    name: MIT License

servers:
  - url: http://localhost:8000/api
    description: Development server

tags:
  - name: Authentication
    description: User registration and authentication
  - name: Movies
    description: Movie-related operations
  - name: Shows
    description: Show-related operations
  - name: Bookings
    description: Booking-related operations

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        date_joined:
          type: string
          format: date-time

    Movie:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        duration_minutes:
          type: integer
        description:
          type: string
        genre:
          type: string
        rating:
          type: string
        release_date:
          type: string
          format: date
        is_active:
          type: boolean
        shows_count:
          type: integer
        created_at:
          type: string
          format: date-time

    Show:
      type: object
      properties:
        id:
          type: integer
        movie:
          type: integer
        movie_title:
          type: string
        movie_duration:
          type: integer
        screen_name:
          type: string
        date_time:
          type: string
          format: date-time
        total_seats:
          type: integer
        available_seats:
          type: integer
        is_fully_booked:
          type: boolean
        price:
          type: number
          format: decimal
        booked_seat_numbers:
          type: array
          items:
            type: string
        created_at:
          type: string
          format: date-time

    Booking:
      type: object
      properties:
        id:
          type: integer
        user_username:
          type: string
        movie_title:
          type: string
        show_date_time:
          type: string
          format: date-time
        screen_name:
          type: string
        seat_number:
          type: string
        status:
          type: string
          enum: [booked, cancelled]
        booking_reference:
          type: string
        can_be_cancelled:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Error:
      type: object
      properties:
        error:
          type: string
        details:
          type: object

paths:
  /signup/:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                password_confirm:
                  type: string
                first_name:
                  type: string
                last_name:
                  type: string
              required:
                - username
                - email
                - password
                - password_confirm
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
                  tokens:
                    type: object
                    properties:
                      access:
                        type: string
                      refresh:
                        type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /login/:
    post:
      tags:
        - Authentication
      summary: Login and get JWT tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
                  tokens:
                    type: object
                    properties:
                      access:
                        type: string
                      refresh:
                        type: string
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /movies/:
    get:
      tags:
        - Movies
      summary: Get list of all active movies
      responses:
        '200':
          description: Movies retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                  movies:
                    type: array
                    items:
                      $ref: '#/components/schemas/Movie'

  /movies/{movie_id}/shows/:
    get:
      tags:
        - Shows
      summary: Get list of shows for a specific movie
      parameters:
        - name: movie_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Shows retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  movie:
                    $ref: '#/components/schemas/Movie'
                  count:
                    type: integer
                  shows:
                    type: array
                    items:
                      $ref: '#/components/schemas/Show'
        '404':
          description: Movie not found

  /shows/{show_id}/book/:
    post:
      tags:
        - Bookings
      summary: Book a seat for a show
      security:
        - BearerAuth: []
      parameters:
        - name: show_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                seat_number:
                  type: string
              required:
                - seat_number
      responses:
        '201':
          description: Seat booked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  booking:
                    $ref: '#/components/schemas/Booking'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Show not found

  /bookings/{booking_id}/cancel/:
    post:
      tags:
        - Bookings
      summary: Cancel a booking
      security:
        - BearerAuth: []
      parameters:
        - name: booking_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Booking cancelled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  booking:
                    $ref: '#/components/schemas/Booking'
        '400':
          description: Bad request
        '403':
          description: Permission denied
        '404':
          description: Booking not found

  /my-bookings/:
    get:
      tags:
        - Bookings
      summary: Get list of user's bookings
      security:
        - BearerAuth: []
      parameters:
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [booked, cancelled]
      responses:
        '200':
          description: Bookings retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                  bookings:
                    type: array
                    items:
                      $ref: '#/components/schemas/Booking'
        '401':
          description: Unauthorized
